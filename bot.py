from telethon import TelegramClient, events, Button, connection
from telethon.tl.functions.messages import GetDialogFiltersRequest
from telethon.tl.functions.channels import CreateChannelRequest
from telethon.tl import types
from telethon.sessions import StringSession, MemorySession
import logging
import sys
import asyncio
import qrcode
from io import BytesIO
import json
import os
from logging.handlers import RotatingFileHandler
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        RotatingFileHandler(
            'logs/bot.log',
            maxBytes=10*1024*1024,  # 10MB
            backupCount=5
        ),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
BOT_TOKEN = os.getenv('BOT_TOKEN')

class UserSession:
    def __init__(self, user_id, bot_instance):
        self.user_id = user_id
        self.client = None
        self.active_folders = {}
        self.folder_handlers = {}
        self.is_authorized = False
        self.session_string = None
        self.bot_instance = bot_instance
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 5

    async def init_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            data = self.bot_instance.load_user_data(self.user_id)
            self.session_string = data.get('session_string')
            self.active_folders = data.get('active_folders', {})
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            self.client = TelegramClient(
                StringSession(self.session_string) if self.session_string else StringSession(),
                API_ID,
                API_HASH,
                device_model='Desktop',
                system_version='Windows 10',
                app_version='1.0',
                flood_sleep_threshold=60,
                request_retries=10,
                connection_retries=10,
                retry_delay=2,
                timeout=30,
                auto_reconnect=True
            )

            await self.client.connect()
            
            if await self.client.is_user_authorized():
                self.is_authorized = True
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                if not self.session_string:
                    self.session_string = self.client.session.save()
                    await self.save_session()
                return True
                
            return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}", exc_info=True)
            return False

    async def save_session(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            self.bot_instance.save_user_data(self.user_id, {
                'session_string': self.session_string,
                'active_folders': self.active_folders
            })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}", exc_info=True)

    async def ensure_connected(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if not self.client.is_connected() or not await self.client.is_user_authorized():
                if self.reconnect_attempts < self.max_reconnect_attempts:
                    self.reconnect_attempts += 1
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.reconnect_attempts}/{self.max_reconnect_attempts}")
                    await self.client.connect()
                    if not await self.client.is_user_authorized():
                        await self.init_client()
                else:
                    logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    self.is_authorized = False
            else:
                self.reconnect_attempts = 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}", exc_info=True)

    async def ensure_authorized(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            if not self.client or not self.client.is_connected():
                await self.client.connect()
            
            if not await self.client.is_user_authorized():
                self.is_authorized = False
                return False
                
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
            return False

    async def handle_action(self, action):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            if not await self.ensure_authorized():
                logger.warning("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                return None
            return await action()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}", exc_info=True)
            return None

class TelegramBot:
    def __init__(self):
        self.bot = None
        self.users = {}
        self.auth_states = {}
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        os.makedirs('user_data', exist_ok=True)

    def load_user_data(self, user_id):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with open(f'user_data/{user_id}.json', 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            return {'active_folders': {}}

    def save_user_data(self, user_id, data):
        """–°–æ—Ö—Ä–∞–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        file_path = f'user_data/{user_id}.json'
        with open(file_path, 'w') as f:
            json.dump(data, f)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤ÔøΩÔøΩ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
        os.chmod(file_path, 0o666)

    async def get_user_session(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.users:
            self.users[user_id] = UserSession(user_id, self)
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            data = self.load_user_data(user_id)
            self.users[user_id].active_folders = data.get('active_folders', {})
        return self.users[user_id]

    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±–æ—Ç–∞
            self.bot = TelegramClient(MemorySession(), API_ID, API_HASH)
            await self.bot.start(bot_token=BOT_TOKEN)
            self.register_handlers()
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}", exc_info=True)
            raise

    async def show_folders(self, event, user_session):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
            dialog_filters = await user_session.client(GetDialogFiltersRequest())
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_session.user_id}")
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–ø–∫–∏: {user_session.active_folders}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–ø–æ–∫
            buttons = []
            for folder in dialog_filters.filters:
                if hasattr(folder, 'title') and folder.title:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏
                    folder_id_str = str(folder.id)
                    is_active = folder_id_str in user_session.active_folders
                    emoji = "‚úÖ" if is_active else "‚≠ïÔ∏è"
                    logger.info(f"–ü–∞–ø–∫–∞ {folder.title} (ID: {folder_id_str}) –∞–∫—Ç–∏–≤–Ω–∞: {is_active}")
                    buttons.append([Button.inline(f"{emoji} {folder.title}", f"folder_{folder.id}")])
            
            if buttons:
                await event.respond(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:",
                    buttons=buttons
                )
            else:
                await event.respond("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞–ø–æ–∫ –≤ Telegram.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {e}", exc_info=True)
            await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫.")

    async def create_folder_channel(self, user_session, folder_title):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–∞–ø–∫–∏"""
        try:
            logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–∞–ø–∫–∏ {folder_title}")
            result = await user_session.client(CreateChannelRequest(
                title=f"üìÅ {folder_title}",
                about=f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –¥–ª—è –ø–∞–ø–∫–∏ {folder_title}",
                megagroup=False,
                for_import=False
            ))
            channel = result.chats[0]
            logger.info(f"–ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {channel.id}")
            return channel
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}", exc_info=True)
            return None

    async def setup_message_forwarding(self, user_session, folder, channel_id):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞–ø–∫–∏"""
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–ª—è –ø–∞–ø–∫–∏ {folder.title}")
        
        async def forward_handler(event):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if not await user_session.client.is_user_authorized():
                    logger.warning("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                    await user_session.init_client()
                    return

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                chat = await event.get_chat()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞: {chat.id}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏
                included_peers = []
                for peer in folder.include_peers:
                    try:
                        entity = await user_session.client.get_entity(peer)
                        included_peers.append(entity.id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
                        continue

                if chat.id in included_peers:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                    await asyncio.sleep(0.5)
                    
                    try:
                        await user_session.client.forward_messages(
                            channel_id,
                            event.message,
                            silent=True
                        )
                        logger.info("–°ÔøΩÔøΩ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")
                        # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                        await user_session.init_client()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        handler = user_session.client.add_event_handler(
            forward_handler,
            events.NewMessage(chats=None)
        )
        user_session.folder_handlers[folder.id] = handler

    def register_handlers(self):
        @self.bot.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            user_id = event.sender_id
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            user_session = await self.get_user_session(user_id)
            
            if not await user_session.init_client():
                await self.start_auth_process(event, user_session)
            else:
                await self.show_folders(event, user_session)

        @self.bot.on(events.CallbackQuery(pattern=r"folder_(\d+)"))
        async def callback_handler(event):
            user_id = event.sender_id
            user_session = await self.get_user_session(user_id)
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if not await user_session.ensure_authorized():
                    await event.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                    await self.start_auth_process(event, user_session)
                    return

                folder_id = int(event.data.decode().split('_')[1])
                folder_id_str = str(folder_id)
                
                async def get_folder_info():
                    dialog_filters = await user_session.client(GetDialogFiltersRequest())
                    return next((f for f in dialog_filters.filters if hasattr(f, 'id') and f.id == folder_id), None)
                
                folder = await user_session.handle_action(get_folder_info)
                if not folder:
                    await event.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ")
                    return
                
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø–∞–ø–∫—É {folder_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                logger.info(f"–¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–ø–∫–∏: {user_session.active_folders}")
                
                if folder_id_str in user_session.active_folders:
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞–ø–∫—É
                    logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–∞–ø–∫–∏ {folder.title}")
                    if folder_id in user_session.folder_handlers:
                        user_session.client.remove_event_handler(user_session.folder_handlers[folder_id])
                        del user_session.folder_handlers[folder_id]
                    del user_session.active_folders[folder_id_str]
                    await event.answer("–ü–∞–ø–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                else:
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞–ø–∫—É
                    logger.info(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–∞–ø–∫–∏ {folder.title}")
                    channel = await self.create_folder_channel(user_session, folder.title)
                    if channel:
                        user_session.active_folders[folder_id_str] = channel.id
                        await self.setup_message_forwarding(user_session, folder, channel.id)
                        await event.answer("–ü–∞–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    self.save_user_data(user_id, {
                        'active_folders': user_session.active_folders
                    })
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–ø–∫–∏: {user_session.active_folders}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
                    await self.show_folders(event, user_session)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}", exc_info=True)
                await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–ø–∫–∏")

    async def cleanup_session(self, user_id):
        """–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            session_file = os.path.join('sessions', f'user_{user_id}.session')
            if os.path.exists(session_file):
                os.remove(session_file)
                logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")

    async def start_auth_process(self, event, user_session):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            await self.cleanup_session(user_session.user_id)
            
            qr_login = await user_session.client.qr_login()
            
            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data(qr_login.url)
            qr.make(fit=True)
            
            img = qr.make_image(fill_color="black", back_color="white")
            bio = BytesIO()
            bio.name = 'qr.png'
            img.save(bio, 'PNG')
            bio.seek(0)
            
            await event.respond(
                "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n"
                "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ -> –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
                "3. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥",
                file=bio
            )
            
            # –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            await qr_login.wait()
            user_session.is_authorized = True
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await self.show_folders(event, user_session)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}: {e}")
            await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def check_connections(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        while True:
            try:
                for user_id, session in self.users.items():
                    if session.is_authorized:
                        if not await session.client.is_user_authorized():
                            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ—Ç–µ—Ä—è–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                            await session.init_client()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}", exc_info=True)
            await asyncio.sleep(15)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥

    async def run(self):
        await self.setup()
        asyncio.create_task(self.check_connections())
        logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        await self.bot.run_until_disconnected()

async def main():
    bot = TelegramBot()
    await bot.run()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)